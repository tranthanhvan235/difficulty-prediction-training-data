# Provide a list of paths to MSA files for which you wish to generate training data
# currently all MSAs will be run under the same model, so make sure to only provide either
# DNA or AA data and not both

msa_paths: [
   /path/to/msa1,
   /path/to/msa2,
   ...
]

# to use partitioned MSAs, provide a link to the partition file for each MSA
# the partition file should be in a RAxML-NG and IQ-Tree compatible format
# note that the MSA features will be computed for the entire alignment
# In this case, the msa_paths list should be a list of lists:
# msa_paths: [
#    [/path/to/msa1, /path/to/msa1.part],
#    /path/to/msa2, /path/to/msa2.part],
#    ...
# ]

# either DNA or AA
data_type: "DNA"

# After running the pipeline, the outdir will contain a subdirectory for each given MSA
# each subdirectory contains:
# - a directory called "output_files": contains all RAxML-NG and IQ-Tree log files
# - an .sqlite3 database file containing all information, see README.md for database schema
outdir: "data/"

# provide the paths to the RAxML-NG, IQ-Tree, and Parsimonator executables here
software:
  raxml-ng:
    command: "path/to/raxml-ng" # https://github.com/tschuelia/raxml-ng
    model: GTR+G
    threads: 2
  iqtree:
    command: "path/to/iqtree" # http://www.iqtree.org
    model: GTR+FO+G4
    threads: 2
  parsimonator:
    command: "path/to/parsimonator" # https://github.com/stamatak/Parsimonator-1.0.2

# these variables are used for coding and debugging, we do not recommend changing them
_debug:
  _num_pars_trees: 50
  _num_rand_trees: 50
  _num_parsimony_trees: 100